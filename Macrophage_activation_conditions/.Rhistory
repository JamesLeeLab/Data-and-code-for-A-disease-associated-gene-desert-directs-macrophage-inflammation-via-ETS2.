rownames(macs.mat)=macs[,1]
head(macs)
head(macs.mat)
values2=aggregate(t(macs.mat), by = list(colnames(macs.mat)), FUN='mean')
dim(values2)
values3=values2[-grep("HS.",rownames(values2)),]
dim(values3)
values3=values2[,-grep("HS.",rownames(values2))]
dim(values3)
head(rownames(values2))
values3=as.matrix(t(values2[,-1]))
colnames(values3)=values2[,1]
head(values3)
values4=values3[,-grep("HS.",rownames(values3))]
dim(values3)
dim(values4)
values4=values3[,-grep("HS.*",rownames(values3))]
dim(values4)
head(values3)
colnames(macs.mat)=colnames(macs)
dim(macs.mat)
dim(macs)
colnames(macs.mat)=colnames(macs)[-1]
head(macs.mat)
head(macs)
data <- getGEO("GSE47189", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(data) > 1) idx <- grep("GPL6947", attr(data, "names")) else idx <- 1
data <- data[[idx]]
fvarLabels(data) <- make.names(fvarLabels(data))
gsms <- paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX00000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
sml <- strsplit(gsms, split="")[[1]]
sel <- which(sml != "X")
sml <- sml[sel]
data <- data[ ,sel]
ex <- exprs(data)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(data) <- log2(ex) }
exprs(data) <- normalizeBetweenArrays(exprs(data))
pData(data)$title=gsub("\\[.*\\]","",as.character(pData(data)$title))
data$group=paste(data$title,data$`activation stimuli:ch1`) #this comprises 67 unique combinations of activation stimuli and durations of exposure
values=exprs(data)
colnames(values)=pData(data)$group
values2=aggregate(t(values), by = list(colnames(values)), FUN='median')
values3=as.matrix(t(values2[,-1]))
colnames(values3)=values2[,1]
genes=mget(rownames(values3),envir=illuminaHumanv4SYMBOL,ifnotfound=NA)
rownames(values3)=genes
values4=aggregate(values3, by=list(rownames(values3)), FUN = "max")
values5=noquote(as.matrix(values4[,-1]))
rownames(values5)=values4[,1]
macs.eset=new('ExpressionSet',exprs=as.matrix(unclass(values5)))
genelists=read.csv(file="ibd_genesets.csv",header=T,na.strings=c("")) #this contains lists of significantly upregulated and downregulated genes in IBD monocytes (differential expression analysis using limma from micrarray data from PMID 27015630).Microarray data are available in ArrayExpress, accession number E-MTAB-3554.
lists=lapply(genelists,function(col)col[!is.na(col)])
macs.gsva=gsva(macs.eset,lists,max.sz=2000)
res=exprs(macs.gsva)
res_dn=res[1,]*-1
res_up=res[2,]
res_sum=res_up+res_dn
res_sum=res_sum[order(-res_sum)]
# Co-expression of ETS2 across these 67 different macrophage activation conditions
library(Hmisc)
CorMatrix2 <- rcorr(t(as.matrix(unclass(values5))), type = "pearson")
ETS2_r <- CorMatrix2$r[, "ETS2"]
ETS2_P <- CorMatrix2$P[, "ETS2"]
ETS2_table <- cbind(ETS2_r, ETS2_P)
ETS2_table <- as.data.frame(ETS2_table)
ETS2_table$p.adj=p.adjust(ETS2_table$ETS2_P,method="BH")
ETS2_table=ETS2_table[order(-ETS2_table$ETS2_r),]
ETS2_table$rank=c(length(ETS2_table$ETS2_r):1)
ETS2_table[1:30,]
ETS2_table[1:50,]
plot(ETS2_table$rank,ETS2_table$r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="Pearson r",ylab="")
ETS2_table[12,]
ETS2_table[11,]
ETS2_table[13,]
points(ETS2_table[c(1,13),]$rank,ETS2_table[c(1,13),]$r,col="red",pch=19,cex=0.8)
X11()
plot(ETS2_table$rank,ETS2_table$r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="Pearson r",ylab="")
data <- getGEO("GSE47189", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(data) > 1) idx <- grep("GPL6947", attr(data, "names")) else idx <- 1
data <- data[[idx]]
fvarLabels(data) <- make.names(fvarLabels(data))
gsms <- paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX00000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000XXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
sml <- strsplit(gsms, split="")[[1]]
sel <- which(sml != "X")
sml <- sml[sel]
data <- data[ ,sel]
ex <- exprs(data)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(data) <- log2(ex) }
exprs(data) <- normalizeBetweenArrays(exprs(data))
pData(data)$title=gsub("\\[.*\\]","",as.character(pData(data)$title))
data$group=paste(data$title,data$`activation stimuli:ch1`) #this comprises 67 unique combinations of activation stimuli and durations of exposure
values=exprs(data)
colnames(values)=pData(data)$group
values2=aggregate(t(values), by = list(colnames(values)), FUN='median')
values3=as.matrix(t(values2[,-1]))
colnames(values3)=values2[,1]
genes=mget(rownames(values3),envir=illuminaHumanv4SYMBOL,ifnotfound=NA)
rownames(values3)=genes
values4=aggregate(values3, by=list(rownames(values3)), FUN = "max")
values5=noquote(as.matrix(values4[,-1]))
rownames(values5)=values4[,1]
macs.eset=new('ExpressionSet',exprs=as.matrix(unclass(values5)))
genelists=read.csv(file="ibd_genesets.csv",header=T,na.strings=c("")) #this contains lists of significantly upregulated and downregulated genes in IBD monocytes (differential expression analysis using limma from micrarray data from PMID 27015630).Microarray data are available in ArrayExpress, accession number E-MTAB-3554.
lists=lapply(genelists,function(col)col[!is.na(col)])
macs.gsva=gsva(macs.eset,lists,max.sz=2000)
res2=exprs(macs.gsva)
res_dn2=res2[1,]*-1
res_up2=res2[2,]
res_sum2=res_up2+res_dn2
res_sum2=res_sum2[order(-res_sum2)]
# Co-expression of ETS2 across these 67 different macrophage activation conditions
library(Hmisc)
CorMatrix2 <- rcorr(t(as.matrix(unclass(values5))), type = "pearson")
ETS2_r <- CorMatrix2$r[, "ETS2"]
ETS2_P <- CorMatrix2$P[, "ETS2"]
ETS2_table2 <- cbind(ETS2_r, ETS2_P)
ETS2_table2 <- as.data.frame(ETS2_table2)
ETS2_table2$p.adj=p.adjust(ETS2_table2$ETS2_P,method="BH")
ETS2_table2=ETS2_table2[order(-ETS2_table2$ETS2_r),]
ETS2_table2$rank=c(length(ETS2_table2$ETS2_r):1)
ETS2_table(1:30)
ETS2_table2(1:30)
ETS2_table2[1:30.]
ETS2_table2[1:30,]
ETS2_table2[1:50,]
ETS2_table2[1:30,]
ETS2_table[1:50,]
pdf("re-do_co-exp.pdf", width=6,height = 6)
plot(ETS2_table$rank,ETS2_table$r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="Pearson r",ylab="")
pdf("re-do_co-exp.pdf", width=6,height = 6)
par(mar=c(4,4,4,4))
plot(ETS2_table$rank,ETS2_table$r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="Pearson r",ylab="")
points(ETS2_table[c(2,13),]$rank,ETS2_table[c(2,13),]$r,col="red",pch=19,cex=0.8)
dev.off()
ETS2_table=ETS2_table[-1,]
HEAD(ets2_TABLE)
HEAD(ETS2_table)
head(ETS2_table)
x11()
plot(ETS2_table$rank,ETS2_table$r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="Pearson r",ylab="")
x11()
plot(ETS2_table$rank,ETS2_table$r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="Pearson r",ylab="")
write.csv(ETS2_table,file="coexp_final_PAPER.csv")
ETS2_table[1:20,]
ETS2_table2=ETS2_table2[order(ETS2_table2$rank),]
ETS2_table=ETS2_table[order(ETS2_table$rank),]
ETS2_table[1:20,]
plot(ETS2_table$rank,ETS2_table$ETS2_r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="Pearson r",ylab="")
points(ETS2_table[c(2,13),]$rank,ETS2_table[c("HIFA","PFKFB3"),]$r,col="red",pch=19,cex=0.8)
points(ETS2_table[c("HIFA","PFKFB3"),]$rank,ETS2_table[c("HIFA","PFKFB3"),]$ETS2_r,col="red",pch=19,cex=0.8)
points(ETS2_table[c("HIF1A","PFKFB3"),]$rank,ETS2_table[c("HIF1A","PFKFB3"),]$ETS2_r,col="red",pch=19,cex=0.8)
oxphos=read.csv(file="oxphos.csv",header=T)
oxphos=read.csv(file="oxphos.csv",header=T)
ox.phos=coexp[rownames(coexp) %in% oxphos$GOBP_AEROBIC_RESPIRATION,]
oxphos=read.csv(file="oxphos.csv",header=T)
ox.phos=ETS2_table[rownames(ETS2_table) %in% oxphos$GOBP_AEROBIC_RESPIRATION,]
points(x=ox.phos$rank,y=ox.phos$ETS2_r,col="blue",pch=19,cex=0.8)
points(ETS2_table[c("HIF1A","PFKFB3"),]$rank,ETS2_table[c("HIF1A","PFKFB3"),]$ETS2_r,col="red",pch=19,cex=0.8)
oxphos=read.csv(file="oxphos.csv",header=T)
ox.phos=ETS2_table[rownames(ETS2_table) %in% oxphos$GOBP_OXIDATIVE_PHOSPHORYLATION,]
plot(ETS2_table$rank,ETS2_table$ETS2_r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="Pearson r",ylab="")
points(x=ox.phos$rank,y=ox.phos$ETS2_r,col="blue",pch=19,cex=0.8)
points(ETS2_table[c("HIF1A","PFKFB3"),]$rank,ETS2_table[c("HIF1A","PFKFB3"),]$ETS2_r,col="red",pch=19,cex=0.8)
abline(h=0.314572,lty=2,col="black")
abline(h=-0.31448,lty=2,col="black")
plot(ETS2_table$rank,ETS2_table$ETS2_r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="Pearson r",ylab="")
abline(h=0.314572,lty=2,col="black")
abline(h=-0.31448,lty=2,col="black")
points(x=ox.phos$rank,y=ox.phos$ETS2_r,col="cornflowerblue",pch=19,cex=0.8)
points(ETS2_table[c("HIF1A","PFKFB3"),]$rank,ETS2_table[c("HIF1A","PFKFB3"),]$ETS2_r,col="red",pch=19,cex=0.8)
plot(ETS2_table$rank,ETS2_table$ETS2_r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="",ylab="")
abline(h=0.314572,lty=2,col="black")
abline(h=-0.31448,lty=2,col="black")
points(x=ox.phos$rank,y=ox.phos$ETS2_r,col="cornflowerblue",pch=19,cex=0.8)
points(ETS2_table[c("HIF1A","PFKFB3"),]$rank,ETS2_table[c("HIF1A","PFKFB3"),]$ETS2_r,col="red",pch=19,cex=0.8)
oxphos=read.csv(file="oxphos.csv",header=T)
ox.phos=ETS2_table[rownames(ETS2_table) %in% oxphos$GOBP_OXIDATIVE_PHOSPHORYLATION,]
plot(ETS2_table$rank,ETS2_table$ETS2_r,pch=19,col="gray",cex=0.5,ylim=c(-1,1),xlab="Pearson r",ylab="")
abline(h=0.314572,lty=2,col="black") #Pearson r values corresponding to FDR P 0.05
abline(h=-0.31448,lty=2,col="black")
points(x=ox.phos$rank,y=ox.phos$ETS2_r,col="cornflowerblue",pch=19,cex=0.8)
points(ETS2_table[c("HIF1A","PFKFB3"),]$rank,ETS2_table[c("HIF1A","PFKFB3"),]$ETS2_r,col="red",pch=19,cex=0.8)
dat=read.csv(file="tnfsf10.csv",header=T)
dat
wilcox.test(AA~GG,data=dat)
dat$AA
wilcox.test(AA ~ GG,data=dat)
colnames(dat)
wilcox.test(dat$AA ~ dat$GG,data=dat)
dat2=as.matrix(dat)
wilcox.test(AA ~ GG,data=dat2)
wilcox.test(AA ~ GG,dat2)
?wilcox.test
wilcox.test(dat$AA,dat$GG, alternative = "greater", paired=F, exact=T)
wilcox.test(dat$AA,dat$GG, alternative = "greater", paired=F)
wilcox.test(dat$AA,dat$GG, alternative = "less", paired=F)
1-0.02251
dat=read.csv(file="tnfsf10.csv",header=T)
wilcox.test(dat$AA,dat$GG, alternative = "less", paired=F)
dat=read.csv(file="tnfsf10.csv",header=T)
wilcox.test(dat$AA,dat$GG, alternative = "less", paired=F)
dat=read.csv(file="tnfsf10.csv",header=T)
wilcox.test(dat$AA,dat$GG, alternative = "less", paired=F)
dat=read.csv(file="tnfsf10.csv",header=T)
wilcox.test(dat$AA,dat$GG, alternative = "less", paired=F)
dat=read.csv(file="tnfsf10.csv",header=T)
wilcox.test(dat$AA,dat$GG, alternative = "less", paired=F)
wilcox.test(dat$AA,dat$GG, alternative = "greater", paired=F)
s0_distance=read.csv(file="S0_distance metrics.csv",header=T)
head(s0_distance)
s0_distance=read.csv(file="S0_distance metrics.csv",header=T,row.names = 1)
head(s0_distance)
df <- structure(list(fruit = c("apple", "banana", "pineapple", "mango"
), size = c(2.5, 5.8, 7.2, 6.3), SE_size = c(0.02, 0.02, 0.02,
0.02), smell = c(5.3, 7.1, 4.3, 7.7), SE_smell = c(0.05, 0.06,
0.01, 0.03), cost = c(10.21, 15.73, 14.12, 15.3), SE_cost = c(0.02,
0.01, 0.02, 0.01)), class = "data.frame", row.names = c(NA, -4L
))
df
library(tidyverse)
BiocManager::install('tidyverse')
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse", dependencies = TRUE, INSTALL_opts = '--no-lock')
BiocManager::install('tidyverse')
library('tidyverse')
df %>%
select(-starts_with("SE_")) %>%
pivot_longer(-fruit, names_to = "trait", values_to = "value") %>%
bind_cols(
.,
df %>% select(starts_with("SE_")) %>% pivot_longer(everything(), names_to = NULL, values_to = "SE")
) %>%
arrange(fruit, desc(trait)) %>%
group_by(fruit) %>%
mutate(cumulative = cumsum(value)) %>%
ggplot(., aes(fill = trait, y = value, x = fruit)) +
geom_bar(position = "stack", stat = "identity") +
geom_errorbar(
aes(
x = fruit,
ymin = cumulative - SE,
ymax = cumulative + SE
),
width = 0.4,
colour = "black",
alpha = 0.9,
size = 1.3,
position="identity"
)
df_responses= pd.read_csv('https://raw.githubusercontent.com/eng-aomar/Security_in_practice/main/secuirtyInPractice.csv')
??pd.read_csv
costsA <- sample(100:200,30, replace=T)
costsB <- sample(100:140,30, replace=T)
costsC <- sample(20:20,30, replace=T)
year <- sample(c("2000", "2010", "2030"), 30, replace=T)
df <- data.frame(costsA, costsB, costsC, year)
df
head(s0_distance)
DevType <- c('Designer', 'Developer, Back', 'Developer, front', 'Engineer')
Salary <- c(120, 340, 72, 400)
Master <- c('1', '2', '3', '4')
Bachelor <- c('6', '1', '3', '1')
University <- c('6', '2', '0', '2')
data1 <- data.frame(DevType, Salary, Master, Bachelor, University)
data1
data1 <- gather(data1, key, value, -DevType, -Salary)
data1
head(s0_distance)
dim(s0_distance)
s0=s0_distance[,c(4,13,14)]
rownames(s0)=s0_distance[,1]
head(s0)
?gather
s0=s0_distance[,c(1,4,13,14)]
head(s0)
s0.test= s0 %>% pivot_longer(-Cell_ID, names_to="key",values_to = "values")
head(s0.test)
s0.test= s0 %>% pivot_longer(-group, names_to="key",values_to = "values")
head(s0.test)
s0=s0_distance[,c(4,13,14)]
head(s0)
s0.test= s0 %>% pivot_longer(-group, names_to="key",values_to = "values")
head(s0.test)
ggplot(s0.test, aes(fill = group, y = key, x = values)) +
geom_bar(position = "stack", stat = "identity")
ggplot(s0.test, aes(fill = key, y = group, x = values)) +
geom_bar(position = "stack", stat = "identity")
ggplot(s0.test[s0.test$group=="Normal Liver Control"], aes(fill = key, y = group, x = values)) +
geom_bar(position = "stack", stat = "identity")
ggplot(s0.test[s0.test$group=="Normal Liver Control",], aes(fill = key, y = group, x = values)) +
geom_bar(position = "stack", stat = "identity")
ggplot(s0.test[s0.test$group=="PSC",], aes(fill = key, y = group, x = values)) +
geom_bar(position = "stack", stat = "identity")
getwd()
data=read.csv(file="avg_macs_from_duct_cells_S0_S1.csv")
data=read.csv(file="avg_macs_from_duct_cells_S0_S1.csv", header=T)
HEAD(DATA)
head(data)
mac_col <- c("Inflammatory.macrophages" = "darkyellow",
"Non.inflammatory.macrophages" = "#F194C1")
mac_col <- c("Inflammatory.macrophages" = "darkorange3",
"Non.inflammatory.macrophages" = "darkslateblue")
psc=data[data$category=="psc",]
ctrl=data[data$category=="ctrl",]
ggplot(psc, aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col)
ggplot(psc[-2], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col)
ggplot(psc[-2,], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col)
psc
ggplot(psc[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col)
ggplot(psc[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme_minimal()
ggplot(psc[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme_minimal() + panel.grid.major = element_blank(),
ggplot(psc[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme_(panel.grid.major = element_blank(),
panel.border = element_blank(),    panel.background = element_blank())
ggplot(psc[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(),    panel.background = element_blank())
ggplot(psc[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank())
ggplot(psc[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,600)
ggplot(psc[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
ggplot(ctrl[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
labs(x = "Radii", y = "Count", title = "Radius - Macrohpage count from duct - PSC") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
ggplot(ctrl[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
ggplot(ctrl[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") + labs(x="",y="")
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
ggplot(ctrl[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") + labs(x="",y="") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
ggplot(psc[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") + labs(x="",y="") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
p=ggplot(psc[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") + labs(x="",y="") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
c = ggplot(ctrl[-c(2,8),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") + labs(x="",y="") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
p+c
data
all = ggplot(data[-c(2,8,14,20),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") + labs(x="",y="") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
all + facet_wrap(vars(category))
all = ggplot(data[-c(2,8,14,20),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") + labs(x="",y="") +
scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
all + facet_wrap(vars(category))
all = ggplot(data[-c(2,8,14,20),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") + labs(x="",y="") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
all + facet_wrap(vars(category))
data
data
mac_col <- c("Inflammatory.macrophages" = "darkred",
"Non.inflammatory.macrophages" = "cornflowerblue")
all = ggplot(data[-c(2,8,14,20),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") + labs(x="",y="") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
all + facet_wrap(vars(category))
mac_col <- c("Inflammatory.macrophages" = "darkslateblue",
"Non.inflammatory.macrophages" = "cornflowerblue")
all = ggplot(data[-c(2,8,14,20),], aes(x = radius, y = within_mean, fill = to)) +
geom_bar(stat = "identity") + labs(x="",y="") +
theme_minimal() + scale_fill_manual(values = mac_col) + theme(panel.grid.major = element_blank(),
panel.border = element_blank(), panel.grid.minor=element_blank(),   panel.background = element_blank()) + ylim(0,620)
all + facet_wrap(vars(category))
library(idr)
BiocManager::install('idr')
library(idr)
?est.IDR
est.IDR
getwd()
setwd('Z:/home/users/bourgec/Turing/_Git_test/ETS2project/Macrophage_activation_conditions')
getwd()
dir()
library('GSVA')
library('edgeR')
library('affy')
library('GEOquery')
library('limma')
library('umap')
library('illuminaHumanv4.db')
data <- getGEO("GSE47189", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(data) > 1) idx <- grep("GPL6947", attr(data, "names")) else idx <- 1
data <- data[[idx]]
fvarLabels(data) <- make.names(fvarLabels(data))
gsms <- paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX00000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
sml <- strsplit(gsms, split="")[[1]]
sel <- which(sml != "X")
sml <- sml[sel]
data <- data[ ,sel]
ex <- exprs(data)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(data) <- log2(ex) }
exprs(data) <- normalizeBetweenArrays(exprs(data))
pData(data)$title=gsub("\\[.*\\]","",as.character(pData(data)$title))
data$group=paste(data$title,data$`activation stimuli:ch1`) #this comprises 67 unique combinations of activation stimuli and durations of exposure (including monocytes)
values=exprs(data)
colnames(values)=pData(data)$group
values2=aggregate(t(values), by = list(colnames(values)), FUN='median')
values3=as.matrix(t(values2[,-1]))
colnames(values3)=values2[,1]
genes=mget(rownames(values3),envir=illuminaHumanv4SYMBOL,ifnotfound=NA)
rownames(values3)=genes
values4=aggregate(values3, by=list(rownames(values3)), FUN = "max")
values5=noquote(as.matrix(values4[,-1]))
rownames(values5)=values4[,1]
macs.eset=new('ExpressionSet',exprs=as.matrix(unclass(values5)))
genelists=read.csv(file="ibd_genesets.csv",header=T,na.strings=c("")) #this contains lists of significantly upregulated and downregulated genes in IBD monocytes (differential expression analysis using limma from micrarray data from PMID 27015630).Microarray data are available in ArrayExpress, accession number E-MTAB-3554.
lists=lapply(genelists,function(col)col[!is.na(col)])
macs.gsva=gsva(macs.eset,lists,max.sz=2000)
res=exprs(macs.gsva)
res_dn=res[1,]*-1
res_up=res[2,]
res_sum=res_up+res_dn
res_sum=res_sum[order(-res_sum)]
res
res[order(-res["cluster0"])]
res=res[order(res[-"cluster0"])]
res["cluster0"]
res
class(res)
res2=t(res)
head(res2)
res2=res2[order(res2[,3])]
res2
res2=t(res)
res2
write.csv(res2,file="tissue_resident_GSVA.csv")
