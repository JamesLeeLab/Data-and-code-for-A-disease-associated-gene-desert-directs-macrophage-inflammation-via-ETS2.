pheno
raw=read.csv(file="barcode_counts.csv",header=T,row.names=1,check.names=F)
pheno=raw[,1:9]
dim(raw)
tpp.matrix=as.matrix(raw[,10:21])
tpp.eset=new('ExpressionSet',exprs=tpp.matrix)
cpm.tpp=cpm(tpp.eset)
median.rna=apply(cpm.tpp[,1:8],1,median)
median.dna=apply(cpm.tpp[,9:12],1,median)
data=cbind(pheno,cpm.tpp)
data$median.rna=median.rna
data$median.dna=median.dna
filt=apply(data[,10:21],1,min)
data_filt_cpm1=data[!filt<1,]
tpp_element.level=aggregate(x=data_filt_cpm1[,10:23],by=list(unique.values=data_filt_cpm1$elementID),FUN=sum)
tpp_elements=tpp_element.level[,2:13]
rownames(tpp_elements)=tpp_element.level[,1]
tpp_elements.qn=normalize.quantiles(as.matrix(tpp_elements),copy=F)
rownames(tpp_elements.qn)=rownames(tpp_elements)
colnames(tpp_elements.qn)=colnames(tpp_elements)
dd <- dist(scale(t(tpp_elements.qn)), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
plot(hc)
dna=tpp_elements.qn[,grep("v",colnames(tpp_elements.qn))]
median.dna=apply(dna,1,median)
tpp=tpp_elements.qn[,grep("TPP",colnames(tpp_elements.qn))]
activity=apply(tpp,2,function(x)  ((x/median.dna)))
head(activity)
pvals=rep(NA,nrow(dna))
for(i in 1:nrow(activity)) pvals[i]=t.test(x=activity[i,],mu=1,alternative="greater")$p.value
activity2=activity[grep("Enhancer",rownames(activity)),]
pvals=rep(NA,nrow(dna))
for(i in 1:nrow(activity2)) pvals[i]=t.test(x=activity2[i,],mu=1,alternative="greater")$p.value
activity_ets2.1=cbind(apply(activity_ets2[,1:8],1,median))
activity_ets2.1=cbind(apply(activity2[,1:8],1,median))
log.activity=log2(activity_ets2.1[,1])
activity_ets2.1=cbind(activity_ets2.1,log.activity,activity2[,9])
activity2=cbind(activity2,pvals)
activity2
activity_ets2.1=cbind(apply(activity2[,1:8],1,median))
log.activity=log2(activity_ets2.1[,1])
activity_ets2.1=cbind(activity_ets2.1,log.activity,activity2[,9])
activity_ets2.1=as.data.frame(activity_ets2.1)
activity_ets2.1$elementID=rownames(activity_ets2.1)
colnames(activity_ets2.1)=c("FC","log.activity","p.value","elementID")
ets2_enh_pheno=pheno[pheno$elementID %in% rownames(activity_ets2.1),]
ets2_bp=as.data.frame(cbind(unique(ets2_enh_pheno$start),unique(ets2_enh_pheno$end),unique(ets2_enh_pheno$elementID)))
colnames(ets2_bp)=c("start","end","elementID")
ets2_enh=join(activity_ets2.1,ets2_bp)
les.input=cbind(ets2_enh$end,ets2_enh$p.value,21)
les.input=data.frame(les.input,stringsAsFactors = F)
les.input[] <- lapply(les.input, type.convert)
colnames(les.input)=c("pos","pval","chr")
les=Les(les.input$pos,les.input$pval)
win=300
les2=estimate(les,win)
threshold(les2) #to determine suitable theta threshold
res <- les::regions(les2, limit=0.327078, verbose = TRUE)
region <- res["regions"]
borders <- c(region$start, region$end)
n=nrow(ets2_enh)
datalist = vector("list", length = n)
for (i in 1:n) {
res=NULL
res$i <- cbind(seq(ets2_enh[i,5],ets2_enh[i,6]),ets2_enh[i,"log.activity"])
datalist[[i]]=res$i
}
big_data = do.call(rbind, datalist)
colnames(big_data)=c("coord","score")
df=aggregate(score~coord,data=big_data,median,na.rm=T)
win300slide10=rollapply(df,width=300,by=10,FUN=mean)
subset=win300slide10[win300slide10[,1]<40467100 & win300slide10[,1]>40465100,]
plot(x=subset[,1],y=subset[,2],ylim=c(-0.18,0.18),pch=19,cex=0.6,xlab="Chromosome 21",ylab="Expression Modulating Activity (log2)")
rect(region$start,-0.19,region$end,0.19,col='mistyrose',border=NA)#numbers from les for 300
points(x=subset[,1],y=subset[,2],pch=19,cex=0.6)
abline(h=0,lty=2,lwd=0.5)
ablineclip(v=40466744,y1=-0.15,y2=-0.1,lwd=1,col='black')
ablineclip(v=40466468,y1=-0.15,y2=-0.1,lwd=3,col='black')
ablineclip(v=40466299,y1=-0.15,y2=-0.1,lwd=3,col='black')
ablineclip(v=40466299,y1=-0.15,y2=-0.1,lwd=1,col='black')
ablineclip(v=40465901,y1=-0.15,y2=-0.1,lwd=1,col='black')
ablineclip(v=40465534,y1=-0.15,y2=-0.1,lwd=1,col='black')
ablineclip(v=40465512,y1=-0.15,y2=-0.1,lwd=1,col='black')
ablineclip(v=40466570,y1=-0.15,y2=-0.1,lwd=3,col='red')
res
res$i
borders
region
setwd('C:/Users/leej1/Dropbox/ETS2/RNAseq')
raw <- readRDS("reads.counts.GRCh38.TPP.RDS")
raw2 <- readRDS("reads.counts.GRCh38.TPP2.RDS")
head(raw)
write.csv(raw,"first_batch_counts.csv")
class(raw)
raw <- readRDS("reads.counts.GRCh38.TPP.RDS")
raw2 <- readRDS("reads.counts.GRCh38.TPP2.RDS")
data=raw$counts
data2=raw2$counts
write.csv(data,"first_batch_counts.csv")
write.csv(data2,"second_batch_counts.csv")
res <- les::regions(les2, limit=0.348781, verbose = TRUE)
region <- res["regions"]
borders <- c(region$start, region$end)
REGION
region
res <- les::regions(les2, limit=0.327, verbose = TRUE)
region <- res["regions"]
borders <- c(region$start, region$end)
region
getwd()
setwd('overexpression')
library(limma)
library(edgeR)
library(DESeq2)
library(GSVA)
library(biomaRt)
data=readRDS("reads.counts.GRCh38.gtf102.TPP_ETS2overexp.RDS")
counts=data$counts
counts=counts[,-c(21:24)]
head(counts)
test=read.table(file="raw_counts.txt",sep='\t',row.names=1)
head(test)
class(test)
class(counts)
dose=rep(c(250,500),16)
rna=rep(rep(c("ets2","rev"),each=2),8)
donor=rep(c(1,2,3,4,5,6,7,8),each=4)
names=paste0(donor,"_",rna,"_",dose)
sample=paste0(rna,"_",dose)
pData=cbind(names,sample,donor,dose,rna)
pData=as.data.frame(pData)
rownames(pData)=names
counts.matrix=as.matrix(counts)
colnames(counts.matrix)=names
counts.eset=new("ExpressionSet",exprs=counts.matrix)
pData(counts.eset)=pData
macs.expressed=rowSums(cpm(counts.matrix)>0.5)>=32
counts.exp=counts.matrix[macs.expressed,]
dge=DGEList(counts=counts.exp)
dge=calcNormFactors(dge)
dge$samples$donor=donor
dge$samples$rna=rna
dge$samples$dose=dose
dge$samples$sample=sample
write.csv(counts,file="raw_counts2.csv")
library(limma)
library(edgeR)
library(DESeq2)
getwd()
counts=read.table(file="raw_counts.txt",sep='\t',row.names=1)
dose=rep(c("d250ng","d500ng"),16)
rna=rep(rep(c("ets2","rev"),each=2),8)
donor=rep(c(1,2,3,4,5,6,7,8),each=4)
names=paste0(donor,"_",rna,"_",dose)
sample=paste0(rna,"_",dose)
pData=cbind(names,sample,donor,dose,rna)
pData=as.data.frame(pData)
rownames(pData)=names
counts.matrix=as.matrix(counts)
colnames(counts.matrix)=names
counts.eset=new("ExpressionSet",exprs=counts.matrix)
pData(counts.eset)=pData
macs.expressed=rowSums(cpm(counts.matrix)>0.5)>=32
class(counts.matrix)
?rowSums
class(counts.eset)
head(counts.matrix)
library(limma)
library(edgeR)
library(DESeq2)
getwd()
counts=as.matrix(read.table(file="raw_counts.txt",sep='\t',row.names=1))
dose=rep(c("d250ng","d500ng"),16)
rna=rep(rep(c("ets2","rev"),each=2),8)
donor=rep(c(1,2,3,4,5,6,7,8),each=4)
names=paste0(donor,"_",rna,"_",dose)
sample=paste0(rna,"_",dose)
pData=cbind(names,sample,donor,dose,rna)
pData=as.data.frame(pData)
rownames(pData)=names
counts.matrix=as.matrix(counts)
colnames(counts.matrix)=names
counts.eset=new("ExpressionSet",exprs=counts.matrix)
pData(counts.eset)=pData
macs.expressed=rowSums(cpm(counts.matrix)>0.5)>=32
class(counts)
head(counts)
library(limma)
library(edgeR)
library(DESeq2)
getwd()
counts=as.matrix(read.table(file="raw_counts.txt",sep='\t',row.names=1),quote=F)
dose=rep(c("d250ng","d500ng"),16)
rna=rep(rep(c("ets2","rev"),each=2),8)
donor=rep(c(1,2,3,4,5,6,7,8),each=4)
names=paste0(donor,"_",rna,"_",dose)
sample=paste0(rna,"_",dose)
pData=cbind(names,sample,donor,dose,rna)
pData=as.data.frame(pData)
rownames(pData)=names
counts.matrix=as.matrix(counts)
colnames(counts.matrix)=names
counts.eset=new("ExpressionSet",exprs=counts.matrix)
pData(counts.eset)=pData
macs.expressed=rowSums(cpm(counts.matrix)>0.5)>=32
library(limma)
library(edgeR)
library(DESeq2)
getwd()
counts=data.matrix(read.table(file="raw_counts.txt",sep='\t',row.names=1))
dose=rep(c("d250ng","d500ng"),16)
rna=rep(rep(c("ets2","rev"),each=2),8)
donor=rep(c(1,2,3,4,5,6,7,8),each=4)
names=paste0(donor,"_",rna,"_",dose)
sample=paste0(rna,"_",dose)
pData=cbind(names,sample,donor,dose,rna)
pData=as.data.frame(pData)
rownames(pData)=names
counts.matrix=as.matrix(counts)
colnames(counts.matrix)=names
counts.eset=new("ExpressionSet",exprs=counts.matrix)
pData(counts.eset)=pData
macs.expressed=rowSums(cpm(counts.matrix)>0.5)>=32
counts.exp=counts.matrix[macs.expressed,]
dge=DGEList(counts=counts.exp)
dge=calcNormFactors(dge)
dge$samples$donor=donor
dge$samples$rna=rna
dge$samples$dose=dose
dge$samples$sample=sample
split.design=model.matrix(~0+factor(dge$samples$sample)+factor(dge$samples$donor))
colnames(split.design)=c("ets2_250","ets2_500","rev_250","rev_500","s2","s3","s4","s5","s6","s7","s8")
split.contrasts=makeContrasts(ets2_250=ets2_250-rev_250,ets2_500=ets2_500-rev_500,levels=colnames(split.design))
split.v=voom(dge,split.design,plot=T)
split.fit=lmFit(split.v,split.design)
split.fit2=contrasts.fit(split.fit,split.contrasts)
split.fit3=eBayes(split.fit2)
summary(decideTests(split.fit3))
design=model.matrix(~0+factor(dge$samples$rna)+factor(dge$samples$donor)+factor(dge$samples$dose))
colnames(design)=c('ets2','rev','s2','s3','s4','s5','s6','s7','s8','d500ng')
contrasts=makeContrasts(ETS2vsREV=ets2-rev,levels=colnames(design))
v=voom(dge,design,plot=T)
fit=lmFit(v,design)
fit2=contrasts.fit(fit,contrasts)
fit3=eBayes(fit2)
summary(decideTests(fit3))
res.table.1=topTable(fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0)
res.table.2=topTable(split.fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0,coef=1)
res.table.3=topTable(split.fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0,coef=2)
head(counts)
library(limma)
library(edgeR)
library(DESeq2)
getwd()
counts=data.matrix(read.table(file="raw_counts.txt",sep='\t',row.names=1,header=T))
dose=rep(c("d250ng","d500ng"),16)
rna=rep(rep(c("ets2","rev"),each=2),8)
donor=rep(c(1,2,3,4,5,6,7,8),each=4)
names=paste0(donor,"_",rna,"_",dose)
sample=paste0(rna,"_",dose)
pData=cbind(names,sample,donor,dose,rna)
pData=as.data.frame(pData)
rownames(pData)=names
counts.matrix=as.matrix(counts)
colnames(counts.matrix)=names
counts.eset=new("ExpressionSet",exprs=counts.matrix)
pData(counts.eset)=pData
macs.expressed=rowSums(cpm(counts.matrix)>0.5)>=32
counts.exp=counts.matrix[macs.expressed,]
dge=DGEList(counts=counts.exp)
dge=calcNormFactors(dge)
dge$samples$donor=donor
dge$samples$rna=rna
dge$samples$dose=dose
dge$samples$sample=sample
split.design=model.matrix(~0+factor(dge$samples$sample)+factor(dge$samples$donor))
colnames(split.design)=c("ets2_250","ets2_500","rev_250","rev_500","s2","s3","s4","s5","s6","s7","s8")
split.contrasts=makeContrasts(ets2_250=ets2_250-rev_250,ets2_500=ets2_500-rev_500,levels=colnames(split.design))
split.v=voom(dge,split.design,plot=T)
split.fit=lmFit(split.v,split.design)
split.fit2=contrasts.fit(split.fit,split.contrasts)
split.fit3=eBayes(split.fit2)
summary(decideTests(split.fit3))
design=model.matrix(~0+factor(dge$samples$rna)+factor(dge$samples$donor)+factor(dge$samples$dose))
colnames(design)=c('ets2','rev','s2','s3','s4','s5','s6','s7','s8','d500ng')
contrasts=makeContrasts(ETS2vsREV=ets2-rev,levels=colnames(design))
v=voom(dge,design,plot=T)
fit=lmFit(v,design)
fit2=contrasts.fit(fit,contrasts)
fit3=eBayes(fit2)
summary(decideTests(fit3))
res.table.1=topTable(fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0)
res.table.2=topTable(split.fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0,coef=1)
res.table.3=topTable(split.fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0,coef=2)
data=readRDS("reads.counts.GRCh38.TPP_ETS2overexp.RDS")
counts=data$counts
counts=counts[,-c(21:24)]
write.csv(counts,file="raw_counts.csv")
library(limma)
library(edgeR)
library(DESeq2)
getwd()
counts=data.matrix(read.table(file="raw_counts.txt",sep='\t',row.names=1,header=T))
dose=rep(c("d250ng","d500ng"),16)
rna=rep(rep(c("ets2","rev"),each=2),8)
donor=rep(c(1,2,3,4,5,6,7,8),each=4)
names=paste0(donor,"_",rna,"_",dose)
sample=paste0(rna,"_",dose)
pData=cbind(names,sample,donor,dose,rna)
pData=as.data.frame(pData)
rownames(pData)=names
counts.matrix=as.matrix(counts)
colnames(counts.matrix)=names
counts.eset=new("ExpressionSet",exprs=counts.matrix)
pData(counts.eset)=pData
macs.expressed=rowSums(cpm(counts.matrix)>0.5)>=32
counts.exp=counts.matrix[macs.expressed,]
dge=DGEList(counts=counts.exp)
dge=calcNormFactors(dge)
dge$samples$donor=donor
dge$samples$rna=rna
dge$samples$dose=dose
dge$samples$sample=sample
split.design=model.matrix(~0+factor(dge$samples$sample)+factor(dge$samples$donor))
colnames(split.design)=c("ets2_250","ets2_500","rev_250","rev_500","s2","s3","s4","s5","s6","s7","s8")
split.contrasts=makeContrasts(ets2_250=ets2_250-rev_250,ets2_500=ets2_500-rev_500,levels=colnames(split.design))
split.v=voom(dge,split.design,plot=T)
split.fit=lmFit(split.v,split.design)
split.fit2=contrasts.fit(split.fit,split.contrasts)
split.fit3=eBayes(split.fit2)
summary(decideTests(split.fit3))
design=model.matrix(~0+factor(dge$samples$rna)+factor(dge$samples$donor)+factor(dge$samples$dose))
colnames(design)=c('ets2','rev','s2','s3','s4','s5','s6','s7','s8','d500ng')
contrasts=makeContrasts(ETS2vsREV=ets2-rev,levels=colnames(design))
v=voom(dge,design,plot=T)
fit=lmFit(v,design)
fit2=contrasts.fit(fit,contrasts)
fit3=eBayes(fit2)
summary(decideTests(fit3))
res.table.1=topTable(fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0)
res.table.2=topTable(split.fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0,coef=1)
res.table.3=topTable(split.fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0,coef=2)
getwd()
setwd('..')
suppressMessages(library(limma))
suppressMessages(library(affy))
suppressMessages(library(edgeR))
suppressMessages(library(biomaRt))
suppressMessages(library(EnhancedVolcano))
suppressMessages(library(plyr))
counts=data.matrix(read.table(file="raw_counts.txt",sep='\t',row.names=1,header=T))
all.names=c('1_g1','1_g4','2_chr21','2_g1','2_g4','2_NTC','3_chr21','3_g1','3_g4','3_NTC','4_chr21','4_NTC','5_chr21','5_g1','5_g4','5_NTC','6_g1','6_g4','6_NTC','7_chr21','7_g1','7_g4','7_NTC','8_g1','8_g1_ROX','8_g4','8_g4_ROX','8_NTC','9_g1','9_g1_ROX','9_g4','9_g4_ROX','9_NTC','10_g1','10_g1_ROX','10_g4','10_g4_ROX','10_NTC')
colnames(counts)=all.names
data2=as.matrix(counts)
eset=new('ExpressionSet',exprs=data2)
eset.expressed=rowSums(cpm(eset)>0.5)>=38
eset.exp=eset[eset.expressed,]
reads=apply(counts,2,sum)
reads
ko=eset.exp[,c(1:2,4:6,8:10,12,14:19,21:24,26,28:29,31,33:34,36,38)]
ko_dge=DGEList(counts=ko)
ko_dge=calcNormFactors(ko_dge)
samples=c('g1','g4','g1','g4','NTC','g1','g4','NTC','NTC','g1','g4','NTC','g1','g4','NTC','g1','g4','NTC','g1','g4','NTC','g1','g4','NTC','g1','g4','NTC')
ko_dge$samples$target=samples
ko_dge$samples$donor=c(1,1,2,2,2,3,3,3,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10)
design=model.matrix(~0+factor(ko_dge$samples$target)+factor(ko_dge$samples$donor))
colnames(design)
colnames(design)=c('g1','g4','NTC','s2','s3','s4','s5','s6','s7','s8','s9','s10')
contrasts=makeContrasts(g1=g1-NTC,g4=g4-NTC, levels=colnames(design))
voom=voom(ko_dge,design,plot=T)
fit=lmFit(voom,design)
fit2=contrasts.fit(fit,contrasts)
fit3=eBayes(fit2)
summary(decideTests(fit3, p=0.05, adjust.method = 'BH'))
chr21=eset.exp[,c(3,6,7,10,11,12,13,16,20,23)]
chr21_dge=DGEList(counts=chr21)
chr21_dge=calcNormFactors(chr21_dge)
chr21.samples=rep(c('chr21','NTC'),5)
chr21_dge$samples$target=chr21.samples
chr21_dge$samples$donor=rep(c("s2","s3","s4","s5","s7"),each=2)
chr21.design=model.matrix(~0+factor(chr21_dge$samples$target)+factor(chr21_dge$samples$donor))
colnames(chr21.design)=c('chr21','NTC','s3','s4','s5','s6')
chr21.contrasts=makeContrasts(chr21=chr21-NTC,levels=colnames(chr21.design))
voom=voom(chr21_dge,chr21.design,plot=T)
chr21.fit=lmFit(voom,chr21.design)
chr21.fit2=contrasts.fit(chr21.fit,chr21.contrasts)
chr21.fit3=eBayes(chr21.fit2)
summary(decideTests(chr21.fit3, p=0.05, adjust.method = 'BH'))
rox=eset.exp[,c(24:38)]
rox_dge=DGEList(counts=rox)
rox_dge=calcNormFactors(rox_dge)
rox.samples=rep(c("g1","g1rox","g4","g4rox","ntc"),3)
rox_dge$samples$target=rox.samples
rox_dge$samples$donor=rep(c("s8","s9","s10"),each=5)
rox.design=model.matrix(~0+factor(rox_dge$samples$target)+factor(rox_dge$samples$donor))
colnames(rox.design)=c('g1','g1rox','g4','g4rox','ntc','s43',"s44")
rox.contrasts=makeContrasts(NTC_vs_g1=NTC-g1,NTC_vs_g1rox=NTC-g1rox,levels=colnames(rox.design))
rox=eset.exp[,c(24:38)]
rox_dge=DGEList(counts=rox)
rox_dge=calcNormFactors(rox_dge)
rox.samples=rep(c("g1","g1rox","g4","g4rox","ntc"),3)
rox_dge$samples$target=rox.samples
rox_dge$samples$donor=rep(c("s8","s9","s10"),each=5)
rox.design=model.matrix(~0+factor(rox_dge$samples$target)+factor(rox_dge$samples$donor))
colnames(rox.design)=c('g1','g1rox','g4','g4rox','ntc','s43',"s44")
rox.contrasts=makeContrasts(NTC_vs_g1=ntc-g1,ntc_vs_g1rox=NTC-g1rox,levels=colnames(rox.design))
rox=eset.exp[,c(24:38)]
rox_dge=DGEList(counts=rox)
rox_dge=calcNormFactors(rox_dge)
rox.samples=rep(c("g1","g1rox","g4","g4rox","ntc"),3)
rox_dge$samples$target=rox.samples
rox_dge$samples$donor=rep(c("s8","s9","s10"),each=5)
rox.design=model.matrix(~0+factor(rox_dge$samples$target)+factor(rox_dge$samples$donor))
colnames(rox.design)=c('g1','g1rox','g4','g4rox','ntc','s43',"s44")
rox.contrasts=makeContrasts(NTC_vs_g1=ntc-g1,NTC_vs_g1rox=ntc-g1rox,levels=colnames(rox.design))
voom=voom(rox_dge,rox.design,plot=T)
rox.fit=lmFit(voom,rox.design)
rox.fit2=contrasts.fit(rox.fit,rox.contrasts)
rox.fit3=eBayes(rox.fit2)
summary(decideTests(rox.fit3, p=0.05, adjust.method = 'BH'))
suppressMessages(library(fGSEA))
BiocManager::install('fGSEA')
library(fgsea)
genelists=read.csv(file="macrophage_genesets_glycolysis_fgsea.csv",header=T)
lists=lapply(genelists,function(col)col[!is.na(col)])
ntc_g1=read.csv(file="ntc_vs_g1_rox.expt.res_final.rank.csv",header=F,row.names=1) # list of genes ranked by t statistic from limma analysis
ntc.g1=unlist(ntc_g1)
names(ntc.g1)=rownames(ntc_g1)
ntc_g1rox=read.csv(file="ntc_vs_g1rox_rox.expt.res_final.rank.csv",header=F,row.names=1) # list of genes ranked by t statistic from limma analysis
ntc.g1rox=unlist(ntc_g1rox)
names(ntc.g1rox)=rownames(ntc_g1rox)
fgsea_ntc.g1=fgsea(pathways=lists, stats=ntc.g1, eps=0.0, minSize=15, maxSize=1000)
ls()
genelists=read.csv(file="macrophage_genesets_glycolysis_fgsea.csv",header=T)
lists=lapply(genelists,function(col)col[!is.na(col)])
ntc_g1=read.csv(file="ntc_vs_g1_rox.expt.res_final.rank.csv",header=F,row.names=1) # list of genes ranked by t statistic from limma analysis
ntc.g1=unlist(ntc_g1)
names(ntc.g1)=rownames(ntc_g1)
ntc_g1rox=read.csv(file="ntc_vs_g1rox_rox.expt.res_final.rank.csv",header=F,row.names=1) # list of genes ranked by t statistic from limma analysis
ntc.g1rox=unlist(ntc_g1rox)
names(ntc.g1rox)=rownames(ntc_g1rox)
fgsea_ntc.g1=fgsea(pathways=lists, stats=ntc.g1, eps=0.0, minSize=15, maxSize=500)
ls()
?fgseaMultilevelCpp
??fgseaMultilevelCpp
library(fgsea)
genelists=read.csv(file="GO_bp_genesets.csv",header=T,na.strings=c(""))
getwd()
setwd('TPPdrugs')
raw=readRDS('reads.counts.GRCh38.TPP.RDS')
head(raw$counts)
getwd()
setwd('..')
setwd('..')
setwd('..')
setwd('Code/ETS2/RNAseq_overexpression')
dir()
library(limma)
library(edgeR)
library(DESeq2)
library(fgsea)
library(data.table)
counts=data.matrix(read.table(file="raw_counts.txt",sep='\t',row.names=1,header=T))
dose=rep(c("d250ng","d500ng"),16)
rna=rep(rep(c("ets2","rev"),each=2),8)
donor=rep(c(1,2,3,4,5,6,7,8),each=4)
names=paste0(donor,"_",rna,"_",dose)
sample=paste0(rna,"_",dose)
pData=cbind(names,sample,donor,dose,rna)
pData=as.data.frame(pData)
rownames(pData)=names
counts.matrix=as.matrix(counts)
colnames(counts.matrix)=names
counts.eset=new("ExpressionSet",exprs=counts.matrix)
pData(counts.eset)=pData
macs.expressed=rowSums(cpm(counts.matrix)>0.5)>=32
counts.exp=counts.matrix[macs.expressed,]
dge=DGEList(counts=counts.exp)
dge=calcNormFactors(dge)
dge$samples$donor=donor
dge$samples$rna=rna
dge$samples$dose=dose
dge$samples$sample=sample
split.design=model.matrix(~0+factor(dge$samples$sample)+factor(dge$samples$donor))
colnames(split.design)=c("ets2_250","ets2_500","rev_250","rev_500","s2","s3","s4","s5","s6","s7","s8")
split.contrasts=makeContrasts(ets2_250=ets2_250-rev_250,ets2_500=ets2_500-rev_500,levels=colnames(split.design))
split.v=voom(dge,split.design,plot=T)
split.fit=lmFit(split.v,split.design)
split.fit2=contrasts.fit(split.fit,split.contrasts)
split.fit3=eBayes(split.fit2)
summary(decideTests(split.fit3))
design=model.matrix(~0+factor(dge$samples$rna)+factor(dge$samples$donor)+factor(dge$samples$dose))
colnames(design)=c('ets2','rev','s2','s3','s4','s5','s6','s7','s8','d500ng')
contrasts=makeContrasts(ETS2vsREV=ets2-rev,levels=colnames(design))
v=voom(dge,design,plot=T)
fit=lmFit(v,design)
fit2=contrasts.fit(fit,contrasts)
fit3=eBayes(fit2)
summary(decideTests(fit3))
res.table.1=topTable(fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0)
res.table.2=topTable(split.fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0,coef=1)
res.table.3=topTable(split.fit3,adjust.method="BH",p=1,number=length(counts.exp[,1]),lfc=0,coef=2)
#write.csv(res.table.1,file="ETS2_overexpression_DEGs_250and500.csv")
#write.csv(res.table.2,file="ETS2_250ng_overexpression_DEGs.csv")
#write.csv(res.table.3,file="ETS2_500ng_overexpression_DEGs.csv")
# fGSEA of selected macrophage pathways, including GIMATS inflammatory macrophage signature
genelists=read.csv(file="macrophage_genesets_fgsea.csv",header=T) # gene sets with genes listed as Gene Symbols
lists=lapply(genelists,function(col)col[!is.na(col)])
oe_500ng=read.csv(file="overexpression_500ng_rank.csv",header=F,row.names=1) # list of genes ranked by t statistic from limma analysis
oe_500ng_num=unlist(oe_500ng)
names(oe_500ng_num)=rownames(oe_500ng)
fgsea_500ng=fgsea(pathways=lists, stats=oe_500ng_num, eps=0.0, minSize=15, maxSize=1000)
